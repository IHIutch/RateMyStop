generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answers {
  id         Int        @id @default(autoincrement())
  value      String?
  questionId Int?
  stopId     Int?
  sessionId  String?    @db.Uuid
  createdAt  DateTime   @default(now()) @db.Timestamptz()
  updatedAt  DateTime   @default(now()) @updatedAt @db.Timestamptz()
  questions  questions? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  stops      stops?     @relation(fields: [stopId], references: [id], onDelete: Cascade)

  @@map("Answers")
}

model categories {
  id        Int         @id @default(autoincrement())
  text      String?     @db.VarChar(255)
  value     String?     @db.VarChar(255)
  createdAt DateTime    @default(now()) @db.Timestamptz()
  updatedAt DateTime    @default(now()) @updatedAt @db.Timestamptz()
  questions questions[]

  @@map("Categories")
}

model questions {
  id         Int         @id @default(autoincrement())
  text       String?     @db.VarChar(255)
  type       String?     @db.VarChar(255)
  // answers    Json?       @db.Json
  categoryId Int?
  active     Boolean?    @default(true)
  createdAt  DateTime    @default(now()) @db.Timestamptz()
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamptz()
  categories categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  answers    answers[]

  @@map("Questions")
}

model stops {
  id                 Int       @id @default(autoincrement())
  stopName           String?   @db.VarChar(255)
  stopId             Int?
  stopCode           Int?
  stopDesc           String?   @db.VarChar(255)
  stopLat            Float?
  stopLon            Float?
  zoneId             Int?
  wheelchairBoarding Boolean?
  createdAt          DateTime  @default(now()) @db.Timestamptz()
  updatedAt          DateTime  @default(now()) @updatedAt @db.Timestamptz()
  answers            answers[]
  watchers           watchers?

  @@map("Stops")
}

model watchers {
  id        Int      @id @default(autoincrement())
  stopId    Int?     @unique
  status    Json?
  scores    Json?
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()
  stops     stops?   @relation(fields: [stopId], references: [id], onDelete: Cascade)

  @@map("Watchers")
}

model users {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@map("Users")
}
