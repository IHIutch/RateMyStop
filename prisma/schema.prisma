generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answers {
  id         Int        @id @default(autoincrement())
  value      String?
  questionId Int?
  stopId     Int?
  sessionId  String?    @db.Uuid
  createdAt  DateTime   @db.Timestamptz(6)
  updatedAt  DateTime   @db.Timestamptz(6)
  Questions  Questions? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Stops      Stops?     @relation(fields: [stopId], references: [id], onDelete: Cascade)
}

model Categories {
  id        Int         @id @default(autoincrement())
  text      String?     @db.VarChar(255)
  value     String?     @db.VarChar(255)
  createdAt DateTime    @db.Timestamptz(6)
  updatedAt DateTime    @db.Timestamptz(6)
  Questions Questions[]
}

model Questions {
  id         Int         @id @default(autoincrement())
  text       String?     @db.VarChar(255)
  type       String?     @db.VarChar(255)
  answers    Json?       @db.Json
  categoryId Int?
  active     Boolean?    @default(true)
  createdAt  DateTime    @db.Timestamptz(6)
  updatedAt  DateTime    @db.Timestamptz(6)
  Categories Categories? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Answers    Answers[]
}

model Stops {
  id                 Int       @id @default(autoincrement())
  stopName           String?   @db.VarChar(255)
  stopId             Int?
  stopCode           Int?
  stopDesc           String?   @db.VarChar(255)
  stopLat            Float?
  stopLon            Float?
  zoneId             Int?
  wheelchairBoarding Boolean?
  createdAt          DateTime  @db.Timestamptz(6)
  updatedAt          DateTime  @db.Timestamptz(6)
  Answers            Answers[]
  Watchers           Watchers?
}

model Watchers {
  id        Int      @id @default(autoincrement())
  stopId    Int?     @unique
  status    Json?
  scores    Json?
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  Stops     Stops?   @relation(fields: [stopId], references: [id], onDelete: Cascade)
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}
